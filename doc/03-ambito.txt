this

var foo = new Foo()
foo===this

this->Metodos privados y protected
foo->Acceso restringido a metodos privados y protected

Se pierde el ambito en dos situaciones
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
//bind,call,apply
1. Cuando asignamos una funcion a una variable
    window.x=10
    window.foo={
        x:11,
        write:function(){console.log(this.x)}
    }
    window.foo.write() //11 has acertado
    window.write = window.foo.write //perdida de ambito
    window.write() //10

    Como consigo que esta linea mantenga el ambito a foo
        window.write = window.foo.write //perdida de ambito
        window.write = window.foo.write.bind(window.foo) //perdida de ambito

2. Cuando pasamos una funcion a otra funcion como argumento

class Foo{
    constructor(){
        //new Bar(this.writer.bind(this)) //1 call en el stack
        new Bar(()=>this.writer()) //2 call en el stack

        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
    }
    writer(){
        console.log(this)
    }
}

class Bar{
    constructor(writer){
        writer()   //undefined
        this.writer = writer 
        this.writer() //Bar
    }
}

new Foo()


//call
    fn.call(this,"Pedro","Hurtado")
//aply
    fn.apply(this,["Pedro","Hurtado"])

function ctor(firstName,secondName){
    this.firstName = firstName
    this.secondName = secondName
}

const instance = {}
ctor.call(instance,"Pedro", "Hurtado")